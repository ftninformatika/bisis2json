apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

version = '1.0.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

task fatJarRecords(type: Jar) {
    manifest {
        attributes 'Main-Class': 'bisis.export.ExportRecords'
    }
    from sourceSets.main.output
    //from sourceSets.resources.files
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
    archiveName 'bisis2json-export-records.jar'
}

task fatJarUsers(type: Jar) {
    manifest {
        attributes 'Main-Class': 'bisis.export.ExportUsers'
    }
    from sourceSets.main.output
    //from sourceSets.resources.files
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
    archiveName 'bisis2json-export-users.jar'
}

task fatJarClientConfig(type: Jar) {
    manifest {
        attributes 'Main-Class': 'bisis.export.ExportClientConfig'
    }
    from sourceSets.main.output
    //from sourceSets.resources.files
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
    archiveName 'bisis2json-export-client-config.jar'
}

task fatJarLendings(type: Jar){
    manifest {
        attributes 'Main-Class': 'bisis.export.ExportLendings'
    }
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
    archiveName 'bisis2json-export-lendings.jar'
}

task fatJarCoders(type: Jar){
    manifest {
        attributes 'Main-Class': 'bisis.export.ExportCoders'
    }
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
    archiveName 'bisis2json-export-coders.jar'
}

task fatJarItemAvailabilities(type: Jar){
    manifest {
        attributes 'Main-Class': 'bisis.export.ExportItemAvailability'
    }
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
    archiveName 'bisis2json-export-item-availabilities.jar'
}


task fatJarBisisMigrate(type: Jar){
    manifest {
        attributes 'Main-Class': 'bisis.export.Mysql2MongoBisisMigrationTool'
    }
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}
    with jar
    archiveName 'bisis-migrate.jar'
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.18'
    compile group: 'org.apache.lucene', name: 'lucene-core', version: '2.2.0'
    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.8'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.8.8'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8'
    compile group: 'org.ini4j', name: 'ini4j', version: '0.5.4'
    compile group: 'org.json', name: 'json', version: '20171018'
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '3.5.0'


}

configurations.archives.artifacts.clear();

artifacts {
    archives fatJarRecords, fatJarUsers, fatJarLendings, fatJarClientConfig, fatJarCoders, fatJarItemAvailabilities, fatJarBisisMigrate
}
